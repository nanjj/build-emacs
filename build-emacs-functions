#!/bin/sh

. ./notify

function clean () {
    [ "x$MESSAGE" != x ] && notify "$MESSAGE"
    rm -rf "${CLEAN[@]}"
    CLEAN=()
}

function clean_up() {
    CLEAN[${#CLEAN[@]}]="$1"
}

function make_dmg () {
    if [ ! -f "emacs-dmg/More.../Alternative Icon" ]; then
        # Git (or anything really) can't store resource forks. So compile the resource fork from scratch:
        Rez -o "emacs-dmg/More.../Alternative Icon" emacs-dmg/icon.r
        # Set the finder info bit that says the file has a custom icon.
        xattr -x -w com.apple.FinderInfo "00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" "emacs-dmg/More.../Alternative Icon"
    fi
    bash emacs-dmg/make-dmg "$1" Emacs emacs-dmg/Applications "$2" emacs-dmg/Heroes.rtf emacs-dmg/More... emacs-dmg/background.png emacs-dmg/dot-DS_Store
}

function build_an_emacs() {
    ARCH="$1"
    GCC="$2"
    HOST="$3"
    MIN_OS="$4"
    EXTRA_GCC_OPTIONS="$5"
    MESSAGE="$OUT failed to build ($ARCH)"
    (cd $SRC && test -f ./configure || ./autogen.sh || ./autogen/copy_autogen) &&
    (cd $SRC && env CC="$GCC -mmacosx-version-min=$MIN_OS $EXTRA_GCC_OPTIONS" ./configure --host=$HOST --build=i686-apple-darwin --with-ns &&
        env CC="$GCC -mmacosx-version-min=$MIN_OS" make clean install) &&

    rm -rf "$SRC/nextstep/$ARCH" &&
    mkdir "$SRC/nextstep/$ARCH" &&
    mv "$SRC/nextstep/Emacs.app" "$SRC/nextstep/$ARCH/Emacs.app" &&
    BUILT[${#BUILT[@]}]="$SRC/nextstep/$ARCH/Emacs.app" &&
    KIND[${#KIND[@]}]="$ARCH"
}

function lipo_2_emacs() {
    for f in `cd $1 && find Contents/MacOS -type f -print0 | xargs -n 1 -0 file | perl -ne 'print "$1\n" if /(.*): Mach-O .*(executable|universal binary)/'`; do
        echo "$f"
        lipo -create "$1/$f" "$2/$f" -output "$1/$f.universal"
        mv -f "$1/$f.universal" "$1/$f";
    done
}

function lipo_emacs() {
    out=$1
    shift
    while [ x"$1" != x ]; do
        lipo_2_emacs $out $1
        shift
    done
    BUILT=($out)
    KIND=(universal)
}

function link_or_copy() {
    # This uses ln to detect if the dest is on another filesystem. I
    # can't use mv because when moving to an appleshare the mac mv
    # always fails when setting the permissions, even though the file
    # already moved (so there's no way to distinguish between that and
    # a real error).
    ln "$1" "$2" 2> /dev/null || cp -a "$1" "$2"
}

function sign_emacs() {
    APP="$1"
    if test -n "$CODE_SIGNER"; then
	codesign -s "$CODE_SIGNER" "$APP"
    fi
}

function make_emacs_dmg() {
    make_dmg "$SRC/nextstep/Emacs.dmg" "$1" || exit
    NAME=$OUT-"$2"-`sw_vers -productVersion`.dmg
    mkdir -p emacs-builds
    link_or_copy $SRC/nextstep/Emacs.dmg emacs-builds/$NAME
    notify "Successfully built $2 emacs: $NAME"
}

function build_universal_emacs() {
    build_an_emacs intel64 gcc                              x86_64-apple-darwin  10.5
    #build_an_emacs intel32 i686-apple-darwin10-gcc-4.2.1    i686-apple-darwin    10.5
    #build_an_emacs powerpc powerpc-apple-darwin10-gcc-4.2.1 powerpc-apple-darwin 10.4

    if [ ${#BUILT[@]} == 0 ]; then
        return -1
    fi
    if [ ${#BUILT[@]} -gt 1 ]; then
        echo "Running lipo on these Emacs flavors: ${KIND[@]}"
        lipo_emacs "${BUILT[@]}"
    else
        echo "Only built ${#BUILT[@]} variant of emacs. No lipo necessary."
    fi

    if test -n "$XCODE_10_7_PATH"; then
	DEVELOPER_PATH="$XCODE_10_7_PATH/Contents/Developer"
	SDK_PATH="$DEVELOPER_PATH/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk"
	PATH=$DEVELOPER_PATH/usr/bin:$PATH build_an_emacs intel64-lion gcc x86_64-apple-darwin 10.7 "-isystem $SDK_PATH/usr/include/ -F$SDK_PATH/System/Library/Frameworks -F$SDK_PATH/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks"

	mv    "${BUILT[0]}/Contents/MacOS/Emacs"      "${BUILT[0]}/Contents/MacOS/Emacs-10.4"
	cp -a "${BUILT[1]}/Contents/MacOS/Emacs"      "${BUILT[0]}/Contents/MacOS/Emacs-10.7"
	cp -a launch.rb                               "${BUILT[0]}/Contents/MacOS/Emacs"
    fi

    sign_emacs "${BUILT[0]}"

    make_emacs_dmg "${BUILT[0]}" "${KIND[0]}"
}

function build_emacs () {
    SRC="$1"
    OUT="$2"

    MESSAGE="$OUT build failed (native)"

    if [ -f .building ]; then
        echo "Already building an emacs or $PWD/.building is stale"
        return -2
    fi
    echo $$ >> .building
    clean_up .building
    clean_up "$SRC"

    trap clean INT EXIT

    build_universal_emacs
    ERR=$?

    MESSAGE=""

    trap "" INT EXIT

    clean

    return $ERR
}
